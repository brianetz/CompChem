from flowcept import Flowcept, flowcept_task

@flowcept_task
def mol_to_xyz(mol):
    conf = mol.GetConformer()
    atoms =[]
    for atom in mol.GetAtoms():
        pos = conf.GetAtomPosition(atom.GetIdx())
        atoms.append({
            "element": atom.GetSymbol(),
            "x": round(pos.x, 6),
            "y": round(pos.y, 6),
            "z": round(pos.z, 6),
        })
    return {
        "num_atoms": mol.GetNumAtoms(),
        "comment": "Generated by RDKit",
        "atoms": atoms
    }

def xyz_dict_to_str(xyz_dict):
    lines = [str(xyz_dict["num_atoms"]), xyz_dict["comment"]]
    for atom in xyz_dict["atoms"]:
        lines.append(f'{atom["element"]} {atom["x"]:.6f} {atom["y"]:.6f} {atom["z"]:.6f}')
    return "\n".join(lines)

@flowcept_task
def write_nwchem_input(xyz_str, job_name, charge, mult, basis="6-31G*", functional="B3LYP"):
    atom_lines = "\n".join(xyz_str.splitlines()[2:])
    input_str = f"""start {job_name}

memory total 2000 mb

charge {charge}

geometry units angstrom
{atom_lines}
end

basis
  * library {basis}
end

dft
  mult {mult}
  xc {functional}
end

task dft optimize
task dft freq
"""
    return {
        "job_name": job_name,
        "charge": charge,
        "multiplicity": mult,
        "basis_set": basis,
        "functional": functional,
        "input_text": input_str
    }

